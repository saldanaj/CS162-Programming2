
/*
 Author: Joaquin Saldana
 Date: 07/21/2016
 Description: this is the implementation file for the Blue Men character.  Below are the traits of the character.
 This character has a special defensive function.
 
 Attack: max score is 20
 Defense: max score is 18.  However, for every 4 points it loses in strength it loses a die.
 Armor: 3
 Strength Pts: 12.  However for every 4 points it loses in strength it loses in it's ability to defend
 themselves.
 */

#include "BlueMen.hpp"


// CLASS CONSTRUCTOR

BlueMen::BlueMen():Character(3, 12)
{
    
}

/**********************************************************************
 Definition of Virtual Functions
 **********************************************************************/

/****************************
 BlueMen CLASS FUNCTIONS
 ****************************/

/***************************************
 Function: attack()
 Return: int
 Description: max attack score is 20 (rolling two ten sided dice)
 ***************************************/

int BlueMen::attack()
{
    int attackDamage = 0;
    
    for(int i = 0; i < 2; i++)
    {
        attackDamage += dice1.tenSidedRoll();
    }
    
    this->setDamage(attackDamage);
    
    return this->getDamage();
}


/***************************************
 Function: defense
 Parameter: int (damage)
 Description: max defensive score is 18.  However for every 4 points it loses in strength it loses a six sided 
 die in defense.  
 ***************************************/

void BlueMen::defense(int d)
{
    int defensiveScore = 0;
    
    int pointsToApplyToStrength = 0;
    
    // **************************
    // Boolean conditions that checks the characters current strength scores
    // depending on it's strength it determines it's defensive score.  The less the
    // strength the less it's able to defend itself.
    // **************************
    
    if(this->getStrength() > 8)
    {
        for(int i = 0; i < 3; i++)
        {
            defensiveScore += dice1.sixSidedRoll();
        }
    }
    
    if(this->getStrength() <= 8 && this->getStrength() > 4)
    {
        cout << "BLUE MEN HAVE LOST ONE MEMBER FROM THE GROUP OF THREE" << endl;
        
        cout << endl;
        
        for(int i = 0; i < 2; i++)
        {
            defensiveScore += dice1.sixSidedRoll();
        }
    }
    
    if(this->getStrength() <= 4 && this->getStrength() > 0)
    {
        cout << "BLUE MEN HAVE NOW LOST TWO MEMBERS FROM THE GROUP OF THREE" << endl;
        
        cout << endl;
        
        defensiveScore += dice1.sixSidedRoll(); 
    }
    
    //*************************************************
    
    cout << "The defensive score generated by BlueMen is: " << defensiveScore << endl;
    
    cout << endl;
    
    pointsToApplyToStrength = (defensiveScore + this->getArmor()) - d;
    
    if(pointsToApplyToStrength < 1)
    {
        this->setStrength(this->getStrength() + pointsToApplyToStrength);
    }
    else
    {
        cout << this->getCharacterName() << " was able to deflect the attack with his defensive score and armor" << endl;
        
        cout << endl; 
    }
    
}


string BlueMen::getCharacterName()
{
    return "Blue Men";
}