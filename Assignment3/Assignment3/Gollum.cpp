/*
 Author: Joaquin Saldana
 Date: 07/21/2016
 Description: this is the implementation file for the Gollum character.  Below are the traits of the character.
 This character has a special attack.
 
 Attack: max attack is 6.  In the attack function, the character will generate a random number between 1 and 20.
 If the number rolled is 10 (a 5% chance), then the character's max attack increases to 18 (three rolls of a six
 sided dice).
 Defense: max defense is 6.
 Armor: 3
 Strength Pts: 8
 */

#include "Gollum.hpp" 

// CLASS CONSTRUCTOR 

Gollum::Gollum():Character(3,8)
{
    
}


/**********************************************************************
 Definition of Virtual Functions
 **********************************************************************/

/****************************
 Gollum CLASS FUNCTIONS
 ****************************/

/***************************************
 Function: attack()
 Return: int
 Description: prior to generating the random attack score, the function will generate a random number between 
 1 and 20.  If the number is 10 (a 5% chance) then the attack score increases to a max number of 18.  Else, the 
 max attack score for a Gollum is 6.
 ***************************************/

int Gollum::attack()
{
    int randomNumber = rand() % 20 + 1;
    
    int attackDamage = 0;
    
    if(randomNumber == 10)
    {        
        cout << "GOLLUM HAS ACTIVATED THE RING!" << endl;
        
        for(int i = 0; i < 3; i++)
        {
            attackDamage += dice1.sixSidedRoll();
        }
        
        this->setDamage(attackDamage);
    }
    else
    {
        attackDamage += dice1.sixSidedRoll();
        
        this->setDamage(attackDamage);
    }
    
    return this->getDamage();
    
}


/***************************************
 Function: defense
 Parameter: int (damage)
 Description: max score of 6.  Only one roll of a six sided die.
 ***************************************/

void Gollum::defense(int d)
{
    int defensiveScore = 0;
    
    int pointsToApplyToStrength = 0;
    
    defensiveScore = dice1.sixSidedRoll();
    
    cout << "The defensive score generated by Gollum is: " << defensiveScore << endl;
    
    cout << endl;
    
    pointsToApplyToStrength = (defensiveScore + this->getArmor()) - d;
    
    if(pointsToApplyToStrength < 1)
    {
        this->setStrength(this->getStrength() + pointsToApplyToStrength);
    }
    else
    {
        cout << this->getCharacterName() << " was able to deflect the attack with his defensive score and armor" << endl;
        
        cout << endl; 
    }
    
}

string Gollum::getCharacterName()
{
    return "Gollum";
}
