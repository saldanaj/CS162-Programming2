/*
 Author: Joaquin Saldana
 Date: 07/21/2016
 Description: this is the implementation file for the Medusa character.  Below are the traits of the character.  This
 character has a special attack.
 
 Attack: max attack is 12.  If the Medusa character rolls a 12, then the character generates such a large
 attack number that it automatically pulverizes the opponent and wins.
 Defense: max defense is 6.
 Armor: 3
 Strength Pts: 8
 */


#include "Medusa.hpp" 

// CLASS CONSTRUCTOR

Medusa::Medusa():Character(3,8)
{
    
}

/**********************************************************************
 Definition of Virtual Functions
 **********************************************************************/

/****************************
 Medusa CLASS FUNCTIONS
 ****************************/

/***************************************
 Function: attack()
 Return: int
 Description: this function returns an integer which is the character's "attack".  The max attack score is 12.
 The function rolls two six sided dices.  In addition, if the Medusa character rolls a 12, then the character's 
 attack increases exponentially therefore pulverizing the opponent and automatically winning.
 ***************************************/

int Medusa::attack()
{
    int attackDamage = 0;
    
    for(int i = 0; i < 2; i++)
    {
        attackDamage += dice1.sixSidedRoll();
    }
    
    this->setDamage(attackDamage);
    
    if(attackDamage == 12)
    {
        cout << "MEDUSA ROLLED A 12 & THE OPPONENT HAS LOOKED HER IN THE EYES!" << endl;
                
        this->setDamage(500);
    }
    
    return this->getDamage();
    
}


/***************************************
 Function: defense
 Parameter: int (damage)
 Description: max defense is 6.  The Medusa character rolls a six sided die to generate the random defensive 
 score.
 ***************************************/

void Medusa::defense(int d)
{
    int defensiveScore = 0;
    
    int pointsToApplyToStrength = 0;
    
    defensiveScore = dice1.sixSidedRoll(); 
    
    std::cout << "The defensive score generated by Medusa is: " << defensiveScore << std::endl;
    
    std::cout << std::endl;
    
    pointsToApplyToStrength = (defensiveScore + this->getArmor()) - d;
    
    if(pointsToApplyToStrength < 1)
    {
        this->setStrength(this->getStrength() + pointsToApplyToStrength);
    }
    else
    {
        cout << this->getCharacterName() << " was able to deflect the attack with his defensive score and armor" << endl;
        
        cout << endl; 
    }
    
}

string Medusa::getCharacterName()
{
    return "Medusa";
}
