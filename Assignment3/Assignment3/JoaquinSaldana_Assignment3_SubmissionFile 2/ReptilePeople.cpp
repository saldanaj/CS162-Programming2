/*
 Author: Joaquin Saldana
 Date: 07/21/2016
 Description: This is the implementation file to the Reptile People class.  This is a derived class to 
 the Character class which is the base class.  The character class has the following traits:
 
 Attack: max attack is 18
 Defense: max defense is 6
 Armor: 7 points in armor
 Strength Pts: 18 points
 
 */

#include "ReptilePeople.hpp" 

// CLASS CONSTRUCTOR 

ReptilePeople::ReptilePeople():Character(7, 18)
{
    
}


/**********************************************************************
 Definition of Virtual Functions
 **********************************************************************/

/****************************
 ReptilePeople CLASS FUNCTIONS
 ****************************/

/***************************************
 Function: attack()
 Return: int
 Description: this function returns an integer which is the character's "attack".  The max attack score is 18. 
 The function rolls six sided dice three times to find the final score.  
 ***************************************/

int ReptilePeople::attack()
{
    int attackDamage = 0;
    
    for(int i = 0; i < 3; i++)
    {
        attackDamage += dice1.sixSidedRoll();
    }
    
    this->setDamage(attackDamage);
    
    return this->getDamage();
    
}


/***************************************
 Function: defense
 Parameter: int (damage) 
 Description: this functions will calculate the character's total damage from it's opponent.  The max defense 
 score this character can roll is 6.  However the opponent's attack is deduced by the character's armor as well.
 The defense score is a random roll of a six sided die.
 ***************************************/


void ReptilePeople::defense(int d)
{
    int defensiveScore = dice1.sixSidedRoll();
    
    int pointsToApplyToStrength = 0;
    
    cout << "The defensive score generated by Reptile People is: " << defensiveScore << endl;
    
    cout << endl;
    
    pointsToApplyToStrength = (defensiveScore + this->getArmor()) - d;
    
    // to prevent ADDING to the character's total strength, we are going to check to ensure there is a
    // a deduction which is the purpose of the following if statement.
    // Else, the function does nothing and the character is not affected because he was able to fend off the
    // attack.
    
    if(pointsToApplyToStrength < 1)
    {
        this->setStrength(this->getStrength() + pointsToApplyToStrength);
    }
    else
    {
        cout << this->getCharacterName() << " was able to deflect the attack with his defensive score and armor" << endl;
        
        cout << endl; 
    }
    
}

string ReptilePeople::getCharacterName()
{
    return "Reptile People";
}

